@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazingChat.Shared.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime


<div class="form-group col-12">
    <div class="table-wrapper-scroll-y my-custom-scrollbar">
        <table class="table table-bordered table-striped mb-0">
            <tbody>
                @foreach (var message in _messages)
                {
                    <tr>                        
                        @message
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<hr>
<div class="form-group col-12">
    <input id="txtMessageInput" class="form-control" @bind="_messageInput" placeholder="message" @onkeydown="@(e => OnKeyDownEvent(e))"/>    
</div>

@code {
    private HubConnection _hubConnection;
    private List<string> _messages = new List<string>();
    private string _userInput;
    private string _messageInput;
    public bool IsConnected;
    public bool IsEnterPressed;

    [CascadingParameter]
    public Task<AuthenticationState> authenticationStateTask { get; set; }
    
    protected override async Task OnInitializedAsync()
    {       
        
        var user = (await authenticationStateTask).User;

        if(!user.Identity.IsAuthenticated)
            NavigationManager.NavigateTo("/");

        Contacts randomContact = await Http.GetJsonAsync<Contacts>("User");

        _userInput = randomContact.FirstName;        
        
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .Build();

        _hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user} : {message}";
            _messages.Add(encodedMsg);
            
            StateHasChanged();
        });

        await _hubConnection.StartAsync();

        if(_hubConnection.State == HubConnectionState.Connected)
            IsConnected = true;
    
    }

    public async Task OnKeyDownEvent(KeyboardEventArgs eventArgs)
    {        
        if(eventArgs.Key == "Enter")
        {
            string messsageToBeSent = await JSRuntime.InvokeAsync<string>("getMessageInput");
            await Send(messsageToBeSent);     
        }
    }

    public async Task Send(string message)
    {
        if(message != null && message.Length > 0)
            await _hubConnection.SendAsync("SendMessage", _userInput, message);
    }
}