@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazingChat.Shared.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@* <div class="form-group col-12">
    <div class="table-wrapper-scroll-y my-custom-scrollbar">
        <table class="table table-bordered table-striped mb-0">
            <tbody>
                @foreach (var message in _messages)
                {
                    <tr>                                                
                        <b style="font-size: larger;">@message</b>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div> *@

<div class="panel panel-primary h-100" style="border:0px;">
    <div class="panel-heading top-bar">
      <div class="col-md-8 col-xs-8">
        <h3 class="panel-title"><span class="glyphicon glyphicon-comment" style="margin-right:6px;"></span>Blazing Chat</h3>
      </div>
    </div>

    <div id="divMessageContainerBase" class="panel-body msg_container_base">
        @* <div class="row msg_container base_sent">
            <div class="col-md-10 col-xs-10">
                <div class="messages msg_sent">
                    <p>that mongodb thing looks good, huh? tiny master db, and huge document store</p>
                </div>
            </div>
        </div>

        <div class="row msg_container base_receive">
            <div class="col-md-10 col-xs-10">
                <div class="messages msg_receive">
                    <p>that mongodb thing looks good, huh? tiny master db, and huge document store</p>
                </div>
            </div>
        </div> *@
        
        @foreach (var message in _messages)
        {            
            @if(message.Contains(user.Identity.Name))
            {
                <div class="row msg_container base_sent">
                    <div class="col-md-10 col-xs-10">
                        <div class="messages msg_sent">
                            <p>@message</p>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="row msg_container base_receive">
                    <div class="col-md-10 col-xs-10">
                        <div class="messages msg_receive">
                            <p>@message</p>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!--CHAT USER BOX-->
    <div class="panel-footer">
      <div class="input-group" id="myForm">
        <input id="txtMessageInput" type="text" class="form-control input-sm chat_input" 
          placeholder="Write your message here..." @onkeydown="@(e => OnKeyDownEventChat(e))">
      </div>
    </div>
</div>

@* <hr>
<div class="form-group col-12">
    <input id="txtMessageInput" class="form-control" @bind="_messageInput" placeholder="message" @onkeydown="@(e => OnKeyDownEvent(e))"/>    
</div> *@

@code {
    private HubConnection _hubConnection;
    private List<string> _messages = new List<string>();
    private string _userInput;
    private string _messageInput;
    public bool IsConnected;
    public bool IsEnterPressed;

    [CascadingParameter]
    public Task<AuthenticationState> authenticationStateTask { get; set; }
    public System.Security.Claims.ClaimsPrincipal user { get; set; }
    
    protected override async Task OnInitializedAsync()
    {       
        
        user = (await authenticationStateTask).User;

        if(!user.Identity.IsAuthenticated)
            NavigationManager.NavigateTo("/");

        Contacts randomContact = await Http.GetJsonAsync<Contacts>("User");

        _userInput = randomContact.FirstName;        
        
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .Build();

        _hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user} : {message}";
            _messages.Add(encodedMsg);

            StateHasChanged();
        });

        await _hubConnection.StartAsync();

        if(_hubConnection.State == HubConnectionState.Connected)
            IsConnected = true;
    
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("setScroll");
    }

    public async Task OnKeyDownEvent(KeyboardEventArgs eventArgs)
    {        
        if(eventArgs.Key == "Enter")
        {
            string messsageToBeSent = await JSRuntime.InvokeAsync<string>("getMessageInput");
            await Send(messsageToBeSent);     
        }
    }

    public async Task Send(string message)
    {
        if(message != null && message.Length > 0)
            await _hubConnection.SendAsync("SendMessage", _userInput, message);
    }

    public async Task OnKeyDownEventChat(KeyboardEventArgs eventArgs)
    {        
        if(eventArgs.Key == "Enter")
        {
            string messsageToBeSent = await JSRuntime.InvokeAsync<string>("getMessageInput");
            await Send(messsageToBeSent);                     
        }
    }
}