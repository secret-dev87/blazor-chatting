@page "/chat"
@page "/chat/{id}"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazingChat.Shared.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div style="border:0px;height:100vh;">
    
    <div class="panel panel-primary" style="height: 100%;">
    
    <div class="panel-heading top-bar">
      <div class="col-md-8 col-xs-8">
        <h3 class="panel-title">
            <span class="glyphicon glyphicon-comment" style="margin-right:6px;">                
            </span>
                @id
            </h3>
      </div>
    </div>

    <div id="divMessageContainerBase" class="panel-body msg_container_base">
        
        @foreach (var messagePack in messagePacks)
        {            
            @if(messagePack.UserName == user.Identity.Name)
            {
                <div class="row msg_container base_sent">
                    <div class="col-md-10 col-xs-10">
                        <div class="messages msg_sent">
                            <p>@messagePack.Message</p>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="row msg_container base_receive">
                    <div class="col-md-10 col-xs-10">
                        <div class="messages msg_receive">
                            <p>@messagePack.Message</p>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!--CHAT USER BOX-->
    <div class="panel-footer">
      <div class="input-group" id="myForm">
        <input id="txtMessageInput" type="text" class="form-control input-sm chat_input" 
          placeholder="Write your message here..." @onkeydown="@(e => OnKeyDownEventChat(e))">
      </div>
    </div>

    </div>

</div>


@code {
    
    [Parameter]
    public string id { get; set; }
    private HubConnection _hubConnection;
    private List<string> _messages = new List<string>();
    private List<MessagePack> messagePacks = new List<MessagePack>();
    private string _userInput;
    public bool IsConnected;
    public bool IsEnterPressed;


    [CascadingParameter]
    public Task<AuthenticationState> authenticationStateTask { get; set; }
    public System.Security.Claims.ClaimsPrincipal user { get; set; }
    
    protected override async Task OnInitializedAsync()
    {       
        
        user = (await authenticationStateTask).User;

        if(!user.Identity.IsAuthenticated)
            NavigationManager.NavigateTo("/");

        Contacts randomContact = await Http.GetJsonAsync<Contacts>("User");

        _userInput = randomContact.FirstName;        
        
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .Build();

        _hubConnection.On<MessagePack>("ReceiveMessage", (messagePack) =>
        {
            messagePacks.Add(messagePack);

            StateHasChanged();
        });


        await _hubConnection.StartAsync();

        if(_hubConnection.State == HubConnectionState.Connected)
            IsConnected = true;
    
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("setScroll");
    }

    public async Task OnKeyDownEvent(KeyboardEventArgs eventArgs)
    {        
        if(eventArgs.Key == "Enter")
        {
            string messsageToBeSent = await JSRuntime.InvokeAsync<string>("getMessageInput");
            await Send(messsageToBeSent);     
        }
    }

    public async Task Send(string message)
    {
        if(message != null && message.Length > 0)
        {
            MessagePack messagePack = new MessagePack();
            messagePack.UserName = _userInput;
            messagePack.Message = message;

            await _hubConnection.SendAsync("SendMessage", messagePack);
        }            
    }

    public async Task OnKeyDownEventChat(KeyboardEventArgs eventArgs)
    {        
        if(eventArgs.Key == "Enter")
        {
            string messsageToBeSent = await JSRuntime.InvokeAsync<string>("getMessageInput");
            await Send(messsageToBeSent);                     
        }
    }
}