@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazingChat.Shared.Models
@inject NavigationManager NavigationManager
@inject HttpClient Http

<div class="form-group col-12">
    <label>Logged in as : <b>@_userInput</b></label> 
</div>

<div class="form-group col-12">
    <div class="table-wrapper-scroll-y my-custom-scrollbar">
        <table class="table table-bordered table-striped mb-0">
            <tbody>
                @foreach (var message in _messages)
                {
                    <tr>
                        <th scope="row">
                            @message
                        </th>                        
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@* <div class="form-group bg-light">
    <ul id="messagesList">
    @foreach (var message in _messages)
    {
        <li>@message</li>
    }
    </ul>
</div> *@

<hr>

<div class="form-group col-12">
    <input class="form-control" @bind="_messageInput" placeholder="message"/>    
</div>
<div class="form-group col-12">
    <button class="btn btn-primary" @onclick="Send" disabled="@(!IsConnected)">Send</button>
</div>

@code {
    private HubConnection _hubConnection;
    private List<string> _messages = new List<string>();
    private string _userInput;
    private string _messageInput;
    public bool IsConnected;

    protected override async Task OnInitializedAsync()
    {        
        User randomUserName = await Http.GetJsonAsync<User>("User");

        _userInput = randomUserName.UserName;        
        
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .Build();

        _hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user} : {message}";
            _messages.Add(encodedMsg);
            
            StateHasChanged();
        });

        await _hubConnection.StartAsync();

        if(_hubConnection.State == HubConnectionState.Connected)
            IsConnected = true;
    }

    public async Task Send()
    {
        await _hubConnection.SendAsync("SendMessage", _userInput, _messageInput);
    }
    
}